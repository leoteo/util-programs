- combine extrapolate and sumbias to a single program
  => extrapolated cubes never have to be written to disk

- cube.cpp: reduce compile time by 
  - importing less qi spirit headers? done
  - importing less qi phoenix headers? done
  - doing easier rules

- global: Change to classes instead of structs as soon as possible
  - Solve Problem: Apparently, it is not possible to parse into a
    class using boost::spirit::qi 
    (cannot bind class constructor, would have to define class factory
     function that calls the constructor and returns a class object)
    At the moment I just defined Cube as a friend class.

- la: implement  stride/resize using Blitz++

- replace Grid::sum() by Kahan sum

- stm: Doing sts with energetic broadening on an stm-profile (without energetic
  broadening) is not internally consistent.
  In sumbias I should also admix states (with an erf prefactor or similar) that 
  are outside the bias window.
Done:
- Change incrementCount ind la::Direction to pointCount or somthing similar
- la: replace Grid by template<unsigned int dim> Grid   One might think of a specialization CubeGrid and move the convenience
  functions there  (declared in formats/cube.h)
- Sadly, there is no const way of mapping preexisting data with blitz (?)
  Think about a solution for that
  Solution: Cheat by using const_cast
- Do transition to reading from configuration file instead of command
  line parameters (see the description on boost_program_options

